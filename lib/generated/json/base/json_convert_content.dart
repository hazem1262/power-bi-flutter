// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:bower_bi/data/embed_report_entity.dart';
import 'package:bower_bi/generated/json/embed_report_entity_helper.dart';
import 'package:bower_bi/data/report_pages_entity.dart';
import 'package:bower_bi/generated/json/report_pages_entity_helper.dart';
import 'package:bower_bi/data/report_entity.dart';
import 'package:bower_bi/generated/json/report_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case EmbedReportEntity:
				return embedReportEntityFromJson(data as EmbedReportEntity, json) as T;
			case EmbedReportEmbedReport:
				return embedReportEmbedReportFromJson(data as EmbedReportEmbedReport, json) as T;
			case EmbedReportEmbedToken:
				return embedReportEmbedTokenFromJson(data as EmbedReportEmbedToken, json) as T;
			case ReportPagesEntity:
				return reportPagesEntityFromJson(data as ReportPagesEntity, json) as T;
			case ReportPagesPageVisuals:
				return reportPagesPageVisualsFromJson(data as ReportPagesPageVisuals, json) as T;
			case ReportEntity:
				return reportEntityFromJson(data as ReportEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case EmbedReportEntity:
				return embedReportEntityToJson(data as EmbedReportEntity);
			case EmbedReportEmbedReport:
				return embedReportEmbedReportToJson(data as EmbedReportEmbedReport);
			case EmbedReportEmbedToken:
				return embedReportEmbedTokenToJson(data as EmbedReportEmbedToken);
			case ReportPagesEntity:
				return reportPagesEntityToJson(data as ReportPagesEntity);
			case ReportPagesPageVisuals:
				return reportPagesPageVisualsToJson(data as ReportPagesPageVisuals);
			case ReportEntity:
				return reportEntityToJson(data as ReportEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (EmbedReportEntity).toString()){
			return EmbedReportEntity().fromJson(json);
		}
		if(type == (EmbedReportEmbedReport).toString()){
			return EmbedReportEmbedReport().fromJson(json);
		}
		if(type == (EmbedReportEmbedToken).toString()){
			return EmbedReportEmbedToken().fromJson(json);
		}
		if(type == (ReportPagesEntity).toString()){
			return ReportPagesEntity().fromJson(json);
		}
		if(type == (ReportPagesPageVisuals).toString()){
			return ReportPagesPageVisuals().fromJson(json);
		}
		if(type == (ReportEntity).toString()){
			return ReportEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<EmbedReportEntity>[] is M){
			return data.map<EmbedReportEntity>((e) => EmbedReportEntity().fromJson(e)).toList() as M;
		}
		if(<EmbedReportEmbedReport>[] is M){
			return data.map<EmbedReportEmbedReport>((e) => EmbedReportEmbedReport().fromJson(e)).toList() as M;
		}
		if(<EmbedReportEmbedToken>[] is M){
			return data.map<EmbedReportEmbedToken>((e) => EmbedReportEmbedToken().fromJson(e)).toList() as M;
		}
		if(<ReportPagesEntity>[] is M){
			return data.map<ReportPagesEntity>((e) => ReportPagesEntity().fromJson(e)).toList() as M;
		}
		if(<ReportPagesPageVisuals>[] is M){
			return data.map<ReportPagesPageVisuals>((e) => ReportPagesPageVisuals().fromJson(e)).toList() as M;
		}
		if(<ReportEntity>[] is M){
			return data.map<ReportEntity>((e) => ReportEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}